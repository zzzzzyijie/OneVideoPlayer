lane :release_pod do |options|
  target_repo    = options[:repo]
  target_project = options[:project]
  target_version = options[:version]
  spec_path = "#{target_project}.podspec"

  # 《1》 先提交代码，再git pull 拉取最新代码
  git_add(path: '.')
  git_commit(path: '.', message: "local commit")
  git_pull

  # 《2》确认是 main 分支
  # ensure_git_branch(    branch: 'main'  )

  # 《3》修改 spec 为即将发布的版本
  version_bump_podspec(path: spec_path, version_number: target_version)

  # 《4》再次提交代码到远程仓库
  git_add(path: '.')
  git_commit(path: '.', message: "release #{target_version}")
  push_to_git_remote

  # 《5》检查对于 tag 是否已经存在，如果存在则，删除再添加该tag
  if git_tag_exists(tag: target_version)
      # 删除对应 tag
      UI.message("您输入的tag:#{target_version}已存在，请设置正确的tag") 
      #remove_git_tag(tagNum: target_version)
  end

  # 《6》添加trunk tag
  add_git_tag(tag: target_version)
  # 提交 tag
  push_git_tags

  # 《7》验证 spec 文件
  pod_lib_lint(allow_warnings: true)

  # 《8》检查是否传了 repo 参数，如果发布私有框架，就需要传自己的 spec 仓库名，发布到官方库不需要传。
  if target_repo
  	# pod repo push 'target_repo' 'spec_path'
    pod_push(path: spec_path, repo: target_repo, allow_warnings: true)
  else
  	# pod trunk push 'spec_path'
    pod_push(path: spec_path, allow_warnings: true)
  end
end